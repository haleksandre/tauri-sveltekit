name: release
on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - next
  workflow_dispatch:
  workflow_call:

jobs:
  release:
    if: github.event.pull_request.merged == true
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      data: ${{ steps.release.outputs.data }}
      id: ${{ steps.release.outputs.id }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
      number: ${{ steps.release.outputs.number }}
      prerelease: ${{ steps.release.outputs.prerelease }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Build
        uses: ./.github/setup

      - name: Create Release
        id: changesets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: changesets/action@v1
        with:
          version: bun x changeset version
          publish: bun x changeset publish

      - name: Get Release
        id: release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            if (${{ steps.changesets.outputs.published }}) {
              const releases = ${{ steps.changesets.outputs.publishedPackages }};
              const { name, version } = releases[0];

              const { setOutput, info } = core;
              const { owner, repo } = context.repo;

              const tag = `v${version}`;
              const {
                data: { id, prerelease, ...data }
              } = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag
              });

              // Use to convert to a numbered prerelease for WIX releases
              const toNumber = (version) => {
                const parts = version.split("-");
              
                const prerelease = {
                  alpha: 10,
                  beta: 20,
                  next: 30,
                  rc: 40,
                };
              
                if (parts.length > 1) {
                  const label = parts[1].split(".")[0].toLowerCase();
              
                  if (prerelease[label]) {
                    const preReleaseNumber = parseInt(parts[1].split(".")[1] || "0", 10);
                    const baseVersion = parts[0];
                    return `${baseVersion}.${prerelease[label] + preReleaseNumber}`;
                  }
                }
              
                return version;
              }
              
              info(`set outputs`);

              info(`  data: ${JSON.stringify({ id, prerelease, ...data })}`);
              setOutput(`data`, { id, prerelease, ...data });

              info(`  id: "${id}"`);
              setOutput(`id`, id);

              info(`  version: "${version}"`);
              setOutput(`version`, version);

              info(`  tag: "${tag}"`);
              setOutput(`tag`, tag);

              info(`  number: "${toNumber(version)}"`);
              setOutput(`number`, number);

              info(`  prerelease: "${prerelease}"`);
              setOutput(`prerelease`, prerelease);
            }
            
  desktop:
    needs: release
    if: ${{ needs.release.outputs.published }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: ''
            args: ''
            shell: bash
          - platform: macos-latest # for Arm based macs (M1 and above).
            target: aarch64-apple-darwin
            args: --target aarch64-apple-darwin
            shell: bash
          - platform: macos-latest # for Intel based macs.
            target: x86_64-apple-darwin
            args: --target x86_64-apple-darwin
            shell: bash
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            args: --target aarch64-pc-windows-msvc --bundles nsis
            shell: pwsh
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            args: --target x86_64-pc-windows-msvc
            shell: pwsh
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/setup
        with:
          rust: true
          ubuntu-dependencies: ${{ matrix.platform == 'ubuntu-latest' }}

      - name: Build & Publish
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: bun x tauri
          args: ${{ matrix.args }}
          releaseId: ${{ needs.release.outputs.id }}
          appVersion: ${{ matrix.target == 'x86_64-pc-windows-msvc' && needs.release.outputs.number  }}

  android:
    needs: release
    if: ${{ needs.release.outputs.published }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: aarch64-linux-android,arm-linux-androideabi,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
            shell: bash

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup
        id: setup
        uses: ./.github/setup
        with:
          android: true

      - name: Create Keys
        id: signing
        shell: bash
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.ALIAS }}
        run: |
          echo $KEYSTORE | base64 --decode > $GITHUB_WORKSPACE/src-tauri/gen/android/app/keystore.jks
          cat > $GITHUB_WORKSPACE/src-tauri/gen/android/app/key.properties<< EOF
            storePassword=$STORE_PASSWORD
            keyPassword=$KEY_PASSWORD
            keyAlias=$ALIAS
            storeFile=keystore.jks
          EOF

      - name: Build
        uses: tauri-apps/tauri-action@v0
        env:
          NDK_HOME: ${{ steps.setup.outputs.ndk-path }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: bun x tauri android
      
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: |
            **/*.apk