name: release
on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - next
  workflow_dispatch:
  workflow_call:

jobs:
  # test:
  #   permissions:
  #     contents: write
  #   uses: ./.github/workflows/test.yml
  #   secrets: inherit

  release:
    # needs: test
    if: github.event.pull_request.merged
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
    outputs:
      id: ${{ steps.release.outputs.id }}
      tag: ${{ steps.release.outputs.tag }}  
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Build
        uses: ./.github/setup

      - name: Create Release
        id: changesets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: changesets/action@v1
        with:
          # commit: "chore(release): v${{ env.VERSION }}"
          # title: "release v${{ env.VERSION }}"
          version: bun x changeset version
          publish: bun x changeset publish

      - name: Release Id
        id: release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const releases = ${{ steps.changesets.outputs.publishedPackages }};
            const { name, version } = releases[0];

            const { owner, repo } = context.repo;
            const tag = `v${version}`;

            const { data: { id } } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag,
            });

            core.setOutput('id', id);
            core.setOutput('tag', tag);

  desktop:
    needs: release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: ""
            args: ""
            shell: bash
          - platform: macos-latest # for Arm based macs (M1 and above).
            target: "aarch64-apple-darwin"
            args: ""
            shell: bash
          - platform: macos-latest # for Intel based macs.
            target: "x86_64-apple-darwin"
            args: ""
            shell: bash
          - platform: windows-latest
            target: "aarch64-pc-windows-msvc"
            args: "--bundles nsis"
            shell: pwsh
          - platform: windows-latest
            target: "x86_64-pc-windows-msvc"
            args: ""
            shell: pwsh
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/setup
        with:
          ubuntu-dependencies: true

      - name: Build & Publish
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ github.ref_name != 'main' }}
        with:
          tauriScript: "bun x tauri"
          args: ${{ matrix.target && format('--target {0}', matrix.target) }} ${{ matrix.args }}
          releaseId: ${{ needs.release.outputs.id }}

  android:
    needs: release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: aarch64-linux-android,arm-linux-androideabi,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
            args: ""
            shell: bash

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup
        id: setup
        uses: ./.github/setup
        with:
          android: true

      - name: Create Keys
        id: signing
        shell: bash
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.ALIAS }}
        run: |
          echo $KEYSTORE | base64 --decode > $GITHUB_WORKSPACE/src-tauri/gen/android/app/keystore.jks
          cat > $GITHUB_WORKSPACE/src-tauri/gen/android/app/key.properties<< EOF
            storePassword=$STORE_PASSWORD
            keyPassword=$KEY_PASSWORD
            keyAlias=$ALIAS
            storeFile=keystore.jks
          EOF

      - name: Build
        uses: tauri-apps/tauri-action@v0
        env:
          NDK_HOME: ${{ steps.setup.outputs.ndk-path }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ github.ref_name != 'main' }}
        with:
          tauriScript: "bun x tauri android"
          args: ${{ matrix.args }}
          # releaseId: ${{ needs.release.outputs.id }}
      
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: |
            **/*.apk